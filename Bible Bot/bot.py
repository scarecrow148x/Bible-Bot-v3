import json
from telegraph import Telegraph
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import os
import re
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
from datetime import datetime, date, timedelta
from telegram.constants import ChatType
from telegram.ext import ConversationHandler as TGConversationHandler

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ë–∏–±–ª–∏–∏
with open('bible.json', 'r', encoding='utf-8') as f:
    BIBLE = json.load(f)

LINKS_FILE = 'telegraph_links.json'
if os.path.exists(LINKS_FILE):
    with open(LINKS_FILE, 'r', encoding='utf-8') as f:
        TELEGRAPH_LINKS = json.load(f)
else:
    TELEGRAPH_LINKS = {}

SUBSCRIBERS_FILE = 'subscribers.json'
if os.path.exists(SUBSCRIBERS_FILE):
    with open(SUBSCRIBERS_FILE, 'r', encoding='utf-8') as f:
        SUBSCRIBERS = set(json.load(f))
else:
    SUBSCRIBERS = set()

NOTES_FILE = 'notes.json'
if os.path.exists(NOTES_FILE):
    with open(NOTES_FILE, 'r', encoding='utf-8') as f:
        ALL_NOTES = json.load(f)
else:
    ALL_NOTES = {}

CHANNEL_FILE = 'channel.json'
if os.path.exists(CHANNEL_FILE):
    with open(CHANNEL_FILE, 'r', encoding='utf-8') as f:
        CHANNEL_ID = json.load(f).get('channel_id')
else:
    CHANNEL_ID = None

GROUP_READING_FILE = 'group_reading.json'
if os.path.exists(GROUP_READING_FILE):
    with open(GROUP_READING_FILE, 'r', encoding='utf-8') as f:
        GROUP_READING = json.load(f)
else:
    GROUP_READING = {}

telegraph = Telegraph()
telegraph.create_account(short_name="biblebot")

CHOOSE_BOOK, CHOOSE_CHAPTER, CHAPTER_MENU, BOOK_SEARCH, ADD_NOTE, CHOOSE_PLAN = range(6)

# –°–ø–∏—Å–∫–∏ –∫–Ω–∏–≥ –ø–æ –∑–∞–≤–µ—Ç–∞–º
OLD_TESTAMENT = [
    "–ë—ã—Ç–∏–µ", "–ò—Å—Ö–æ–¥", "–õ–µ–≤–∏—Ç", "–ß–∏—Å–ª–∞", "–í—Ç–æ—Ä–æ–∑–∞–∫–æ–Ω–∏–µ",
    "–ò–∏—Å—É—Å –ù–∞–≤–∏–Ω", "–°—É–¥—å–∏", "–†—É—Ñ—å", "1 –¶–∞—Ä—Å—Ç–≤", "2 –¶–∞—Ä—Å—Ç–≤",
    "3 –¶–∞—Ä—Å—Ç–≤", "4 –¶–∞—Ä—Å—Ç–≤", "1 –ü–∞—Ä–∞–ª–∏–ø–æ–º–µ–Ω–æ–Ω", "2 –ü–∞—Ä–∞–ª–∏–ø–æ–º–µ–Ω–æ–Ω", "–ï–∑–¥—Ä–∞",
    "–ù–µ–µ–º–∏—è", "–ï—Å—Ñ–∏—Ä—å", "–ò–æ–≤", "–ü—Å–∞–ª—Ç–∏—Ä—å", "–ü—Ä–∏—Ç—á–∏",
    "–ï–∫–∫–ª–µ—Å–∏–∞—Å—Ç", "–ü–µ—Å–Ω—å –ø–µ—Å–Ω–µ–π", "–ò—Å–∞–∏—è", "–ò–µ—Ä–µ–º–∏—è", "–ü–ª–∞—á –ò–µ—Ä–µ–º–∏–∏",
    "–ò–µ–∑–µ–∫–∏–∏–ª—å", "–î–∞–Ω–∏–∏–ª", "–û—Å–∏—è", "–ò–æ–∏–ª—å", "–ê–º–æ—Å",
    "–ê–≤–¥–∏–π", "–ò–æ–Ω–∞", "–ú–∏—Ö–µ–π", "–ù–∞—É–º", "–ê–≤–≤–∞–∫—É–º",
    "–°–æ—Ñ–æ–Ω–∏—è", "–ê–≥–≥–µ–π", "–ó–∞—Ö–∞—Ä–∏—è", "–ú–∞–ª–∞—Ö–∏—è"
]
NEW_TESTAMENT = [
    "–û—Ç –ú–∞—Ç—Ñ–µ—è", "–û—Ç –ú–∞—Ä–∫–∞", "–û—Ç –õ—É–∫–∏", "–û—Ç –ò–æ–∞–Ω–Ω–∞", "–î–µ—è–Ω–∏—è",
    "–ö –†–∏–º–ª—è–Ω–∞–º", "1 –ö–æ—Ä–∏–Ω—Ñ—è–Ω–∞–º", "2 –ö–æ—Ä–∏–Ω—Ñ—è–Ω–∞–º", "–ö –ì–∞–ª–∞—Ç–∞–º", "–ö –ï—Ñ–µ—Å—è–Ω–∞–º",
    "–ö –§–∏–ª–∏–ø–ø–∏–π—Ü–∞–º", "–ö –ö–æ–ª–æ—Å—Å—è–Ω–∞–º", "1 –§–µ—Å—Å–∞–ª–æ–Ω–∏–∫–∏–π—Ü–∞–º", "2 –§–µ—Å—Å–∞–ª–æ–Ω–∏–∫–∏–π—Ü–∞–º", "1 –¢–∏–º–æ—Ñ–µ—é",
    "2 –¢–∏–º–æ—Ñ–µ—é", "–ö –¢–∏—Ç—É", "–ö –§–∏–ª–∏–º–æ–Ω—É", "–ö –ï–≤—Ä–µ—è–º", "–ò–∞–∫–æ–≤",
    "1 –ü–µ—Ç—Ä–∞", "2 –ü–µ—Ç—Ä–∞", "1 –ò–æ–∞–Ω–Ω–∞", "2 –ò–æ–∞–Ω–Ω–∞", "3 –ò–æ–∞–Ω–Ω–∞",
    "–ò—É–¥–∞", "–û—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ"
]

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_all_books():
    return list(BIBLE.keys())

def get_all_chapters(book):
    return list(BIBLE[book].keys())

def get_telegraph_link(book, chapter, verses):
    key = f"{book}|{chapter}"
    if key in TELEGRAPH_LINKS:
        return TELEGRAPH_LINKS[key]
    # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è Telegraph: –∫–∞–∂–¥—ã–π —Å—Ç–∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º <p> —Å –∂–∏—Ä–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
    html = f"<b>{book} {chapter} –≥–ª–∞–≤–∞</b>" + ''.join([f"<p><b>{i+1}</b>. {v}</p>" for i, v in enumerate(verses)])
    response = telegraph.create_page(
        title=f"{book} {chapter}",
        html_content=html
    )
    link = 'https://telegra.ph/' + response['path']
    TELEGRAPH_LINKS[key] = link
    with open(LINKS_FILE, 'w', encoding='utf-8') as f:
        json.dump(TELEGRAPH_LINKS, f, ensure_ascii=False, indent=2)
    return link

def get_chapter_text(book, chapter):
    verses = BIBLE[book][chapter]
    text = f"{book} {chapter} –≥–ª–∞–≤–∞:\n" + '\n'.join([f"{i+1}. {v}" for i, v in enumerate(verses)])
    return text, verses

def get_next_chapter(book, chapter):
    chapters = get_all_chapters(book)
    idx = chapters.index(chapter)
    if idx < len(chapters) - 1:
        return chapters[idx + 1]
    return None

def get_prev_chapter(book, chapter):
    chapters = get_all_chapters(book)
    idx = chapters.index(chapter)
    if idx > 0:
        return chapters[idx - 1]
    return None

def get_first_chapter(book):
    return get_all_chapters(book)[0]

def get_last_chapter(book):
    return get_all_chapters(book)[-1]

def filter_books(query):
    query = query.lower()
    return [book for book in get_all_books() if query in book.lower()]

def add_to_history(context, book, chapter):
    if 'history' not in context.user_data:
        context.user_data['history'] = []
    entry = (book, chapter)
    if entry in context.user_data['history']:
        context.user_data['history'].remove(entry)
    context.user_data['history'].insert(0, entry)
    context.user_data['history'] = context.user_data['history'][:20]

def get_history(context):
    return context.user_data.get('history', [])

def get_last_chapter_from_history(context):
    history = get_history(context)
    if history:
        return history[0]
    return None, None

def chapters_keyboard(chapters, row_size=4):
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≥–ª–∞–≤—ã –ø–æ row_size –≤ —Ä—è–¥
    rows = []
    for i in range(0, len(chapters), row_size):
        rows.append([chapter for chapter in chapters[i:i+row_size]])
    return rows

def books_keyboard(books, row_size=4):
    rows = []
    for i in range(0, len(books), row_size):
        rows.append([book for book in books[i:i+row_size]])
    return rows

async def send_long_message(update, text):
    # –î–µ–ª–∏—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ –æ—á–µ—Ä–µ–¥–∏
    max_len = 4096
    for i in range(0, len(text), max_len):
        await update.message.reply_text(text[i:i+max_len])

# --- –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è ---
def add_favorite(context, book):
    if 'favorites' not in context.user_data:
        context.user_data['favorites'] = []
    if book not in context.user_data['favorites']:
        context.user_data['favorites'].append(book)

def remove_favorite(context, book):
    if 'favorites' in context.user_data and book in context.user_data['favorites']:
        context.user_data['favorites'].remove(book)

def is_favorite(context, book):
    return 'favorites' in context.user_data and book in context.user_data['favorites']

def get_favorites(context):
    return context.user_data.get('favorites', [])

def save_subscribers():
    with open(SUBSCRIBERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(list(SUBSCRIBERS), f, ensure_ascii=False, indent=2)

def save_notes():
    with open(NOTES_FILE, 'w', encoding='utf-8') as f:
        json.dump(ALL_NOTES, f, ensure_ascii=False, indent=2)

def get_user_notes(user_id):
    return ALL_NOTES.get(str(user_id), {})

def add_user_note(user_id, book, chapter, note):
    user_id = str(user_id)
    if user_id not in ALL_NOTES:
        ALL_NOTES[user_id] = {}
    key = f"{book}|{chapter}"
    ALL_NOTES[user_id][key] = note
    save_notes()

def remove_user_note(user_id, book, chapter):
    user_id = str(user_id)
    key = f"{book}|{chapter}"
    if user_id in ALL_NOTES and key in ALL_NOTES[user_id]:
        del ALL_NOTES[user_id][key]
        save_notes()

def get_user_note(user_id, book, chapter):
    user_id = str(user_id)
    key = f"{book}|{chapter}"
    return ALL_NOTES.get(user_id, {}).get(key)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–í–µ—Ç—Ö–∏–π –ó–∞–≤–µ—Ç", "–ù–æ–≤—ã–π –ó–∞–≤–µ—Ç"]]
    keyboard.append(["‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏", "üìñ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è"])
    keyboard.append(["üïì –ò—Å—Ç–æ—Ä–∏—è —á—Ç–µ–Ω–∏—è", "üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏", "üìö –ù–µ–¥–∞–≤–Ω–æ", "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"])
    keyboard.append(["üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–∏—Ö –¥–Ω—è", "üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"])
    keyboard.append(["üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏"])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup
    )
    return CHOOSE_BOOK

async def choose_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —á—Ç–µ–Ω–∏—è":
        await calendar_menu(update, context)
        return CHOOSE_BOOK
    if text == "üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏":
        user_id = update.effective_user.id
        notes = get_user_notes(user_id)
        if not notes:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
            return CHOOSE_BOOK
        keyboard = [[f"{k.replace('|', ' ')}"] for k in notes.keys()]
        keyboard.append(["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ (–∫–Ω–∏–≥–∞ –∏ –≥–ª–∞–≤–∞):", reply_markup=reply_markup)
        return CHOOSE_BOOK
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await start(update, context)
    if text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏":
        favs = get_favorites(context)
        if not favs:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥.")
            return CHOOSE_BOOK
        keyboard = books_keyboard(favs)
        keyboard.append(["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:", reply_markup=reply_markup)
        return CHOOSE_BOOK
    if text == "üìñ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è":
        last = get_last_chapter_from_history(context)
        if last and last[0] and last[1]:
            context.user_data['book'] = last[0]
            context.user_data['chapter'] = last[1]
            return await show_chapter(update, context, last[0], last[1])
        else:
            await update.message.reply_text("–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π –≥–ª–∞–≤—ã.")
            return CHOOSE_BOOK
    if text == "üïì –ò—Å—Ç–æ—Ä–∏—è —á—Ç–µ–Ω–∏—è":
        hist = get_history(context)
        if not hist:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
            return CHOOSE_BOOK
        keyboard = [[f"{b} {c}"] for b, c in hist[:10]]
        keyboard.append(["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –≥–ª–∞–≤—ã:", reply_markup=reply_markup)
        return CHOOSE_BOOK
    if text == "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–∏—Ö –¥–Ω—è":
        user_id = update.effective_user.id
        SUBSCRIBERS.add(user_id)
        save_subscribers()
        await update.message.reply_text("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å—Ç–∏—Ö–∞ –¥–Ω—è!")
        return CHOOSE_BOOK
    if text == "üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏":
        user_id = update.effective_user.id
        if user_id in SUBSCRIBERS:
            SUBSCRIBERS.remove(user_id)
            save_subscribers()
            await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        else:
            await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
        return CHOOSE_BOOK
    # –í—ã–±–æ—Ä –∑–∞–≤–µ—Ç–∞
    if text == "–í–µ—Ç—Ö–∏–π –ó–∞–≤–µ—Ç":
        context.user_data['testament'] = 'old'
        keyboard = books_keyboard(OLD_TESTAMENT)
        keyboard.append(["üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –í–µ—Ç—Ö–æ–≥–æ –ó–∞–≤–µ—Ç–∞:", reply_markup=reply_markup)
        return CHOOSE_BOOK
    if text == "–ù–æ–≤—ã–π –ó–∞–≤–µ—Ç":
        context.user_data['testament'] = 'new'
        keyboard = books_keyboard(NEW_TESTAMENT)
        keyboard.append(["üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –ù–æ–≤–æ–≥–æ –ó–∞–≤–µ—Ç–∞:", reply_markup=reply_markup)
        return CHOOSE_BOOK
    if text == "üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º":
        keyboard = [["–í–µ—Ç—Ö–∏–π –ó–∞–≤–µ—Ç", "–ù–æ–≤—ã–π –ó–∞–≤–µ—Ç"]]
        keyboard.append(["üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏", "üìö –ù–µ–¥–∞–≤–Ω–æ", "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)
        return CHOOSE_BOOK
    # –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥: "–ë—ã—Ç–∏–µ 3" –∏–ª–∏ "–ü—Å–∞–ª—Ç–∏—Ä—å 22"
    match = re.match(r'^([–ê-–Ø–∞-—è–Å—ë\s]+)\s+(\d+)$', text)
    if match:
        book = match.group(1).strip()
        chapter = match.group(2).strip()
        if book in BIBLE and chapter in BIBLE[book]:
            context.user_data['book'] = book
            context.user_data['chapter'] = chapter
            return await show_chapter(update, context, book, chapter)
        else:
            await update.message.reply_text("–¢–∞–∫–æ–π –∫–Ω–∏–≥–∏ –∏–ª–∏ –≥–ª–∞–≤—ã –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return CHOOSE_BOOK
    if text == "üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏:")
        return BOOK_SEARCH
    if text == "üìö –ù–µ–¥–∞–≤–Ω–æ":
        history = get_history(context)
        if not history:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
            return CHOOSE_BOOK
        keyboard = [[f"{b} {c}"] for b, c in history]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ù–µ–¥–∞–≤–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≥–ª–∞–≤—ã:", reply_markup=reply_markup)
        return CHOOSE_BOOK
    if text == "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞":
        await update.message.reply_text(
            "\u2139\ufe0f <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
            "\u2022 –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –∏ –≥–ª–∞–≤—É –¥–ª—è —á—Ç–µ–Ω–∏—è.\n"
            "\u2022 –ú–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≥–ª–∞–≤–µ, –Ω–∞–ø–∏—Å–∞–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–ë—ã—Ç–∏–µ 3'.\n"
            "\u2022 –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏.\n"
            "\u2022 –í –º–µ–Ω—é –≥–ª–∞–≤—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—Ç –∫ –∫–Ω–∏–≥–µ, –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–ª–∞–≤–æ–π –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞.\n"
            "\u2022 –ö–Ω–æ–ø–∫–∞ '–ù–µ–¥–∞–≤–Ω–æ' ‚Äî –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º –≥–ª–∞–≤–∞–º.\n",
            parse_mode='HTML')
        return CHOOSE_BOOK
    # –û–±—ã—á–Ω—ã–π –≤—ã–±–æ—Ä –∫–Ω–∏–≥–∏
    if text in BIBLE:
        chapters = get_all_chapters(text)
        fav_btn = "‚≠ê –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if is_favorite(context, text) else "‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        keyboard = chapters_keyboard(chapters)
        keyboard.append([fav_btn, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        context.user_data['book'] = text
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–∏–≥—É {text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É:", reply_markup=reply_markup)
        return CHOOSE_CHAPTER
    if text == "‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ":
        book = context.user_data.get('book')
        add_favorite(context, book)
        await update.message.reply_text(f"–ö–Ω–∏–≥–∞ {book} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
        return await choose_book(update, context)
    if text == "‚≠ê –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ":
        book = context.user_data.get('book')
        remove_favorite(context, book)
        await update.message.reply_text(f"–ö–Ω–∏–≥–∞ {book} —É–±—Ä–∞–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
        return await choose_book(update, context)
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–Ω–∏–≥–∏
    filtered = filter_books(text)
    if filtered:
        keyboard = [[book] for book in filtered[:10]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:", reply_markup=reply_markup)
        return CHOOSE_BOOK
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–ë—ã—Ç–∏–µ 3'.")
    return CHOOSE_BOOK

async def book_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    filtered = filter_books(query)
    if filtered:
        keyboard = [[book] for book in filtered[:10]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:", reply_markup=reply_markup)
        return CHOOSE_BOOK
    else:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return BOOK_SEARCH

async def choose_chapter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chapter = update.message.text.strip()
    if chapter == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await start(update, context)
    book = context.user_data.get('book')
    if book and chapter in BIBLE[book]:
        context.user_data['chapter'] = chapter
        return await show_chapter(update, context, book, chapter)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return CHOOSE_CHAPTER

async def show_chapter(update: Update, context: ContextTypes.DEFAULT_TYPE, book, chapter):
    text, verses = get_chapter_text(book, chapter)
    link = get_telegraph_link(book, chapter, verses)
    add_to_history(context, book, chapter)
    context.user_data['current_chapter'] = (book, chapter)
    chapters = get_all_chapters(book)
    idx = chapters.index(chapter)
    nav_row = []
    if idx > 0:
        nav_row.append(KeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≥–ª–∞–≤–∞"))
    if idx < len(chapters) - 1:
        nav_row.append(KeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°Ô∏è"))
    nav2_row = [KeyboardButton("‚èÆ –í –Ω–∞—á–∞–ª–æ –∫–Ω–∏–≥–∏"), KeyboardButton("‚è≠ –í –∫–æ–Ω–µ—Ü –∫–Ω–∏–≥–∏")]
    action_row = [KeyboardButton("üìñ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"), KeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤–µ")]
    share_row = [KeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–ª–∞–≤–æ–π"), KeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –∫–Ω–∏–≥–∏")]
    note_row = [KeyboardButton("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"), KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    reply_markup = ReplyKeyboardMarkup(
        [nav_row, nav2_row, action_row, share_row, note_row], resize_keyboard=True
    )
    await send_long_message(update, text)
    await update.message.reply_text(f"–ß–∏—Ç–∞—Ç—å –≤ Telegraph: {link}", reply_markup=reply_markup)
    note = get_user_note(update.effective_user.id, book, chapter)
    if note:
        await update.message.reply_text(f"–í–∞—à–∞ –∑–∞–º–µ—Ç–∫–∞ –∫ —ç—Ç–æ–π –≥–ª–∞–≤–µ:\n{note}")
    return CHAPTER_MENU

async def chapter_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await start(update, context)
    book = context.user_data.get('book')
    chapter = context.user_data.get('chapter')
    chapters = get_all_chapters(book)
    idx = chapters.index(chapter)
    if text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≥–ª–∞–≤–∞":
        prev_ch = get_prev_chapter(book, chapter)
        if prev_ch:
            context.user_data['chapter'] = prev_ch
            return await show_chapter(update, context, book, prev_ch)
    elif text == "–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°Ô∏è":
        next_ch = get_next_chapter(book, chapter)
        if next_ch:
            context.user_data['chapter'] = next_ch
            return await show_chapter(update, context, book, next_ch)
    elif text == "‚èÆ –í –Ω–∞—á–∞–ª–æ –∫–Ω–∏–≥–∏":
        first_ch = get_first_chapter(book)
        context.user_data['chapter'] = first_ch
        return await show_chapter(update, context, book, first_ch)
    elif text == "‚è≠ –í –∫–æ–Ω–µ—Ü –∫–Ω–∏–≥–∏":
        last_ch = get_last_chapter(book)
        context.user_data['chapter'] = last_ch
        return await show_chapter(update, context, book, last_ch)
    elif text == "üìñ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–Ω–∏–≥–∏":
        chapters = get_all_chapters(book)
        keyboard = chapters_keyboard(chapters)
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ {book}:", reply_markup=reply_markup)
        return CHOOSE_CHAPTER
    elif text == "üîô –ö –≤—ã–±–æ—Ä—É –∫–Ω–∏–≥–∏":
        books = get_all_books()
        keyboard = [[book] for book in books[:10]]
        keyboard.append(["üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏", "üìö –ù–µ–¥–∞–≤–Ω–æ", "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –ë–∏–±–ª–∏–∏, –≤–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–ë—ã—Ç–∏–µ 3', –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º:", reply_markup=reply_markup)
        return CHOOSE_BOOK
    elif text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤–µ":
        last_book, last_chapter = get_last_chapter_from_history(context)
        if last_book and last_chapter:
            context.user_data['book'] = last_book
            context.user_data['chapter'] = last_chapter
            return await show_chapter(update, context, last_book, last_chapter)
        else:
            await update.message.reply_text("–ù–µ—Ç —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤—ã.")
            return CHAPTER_MENU
    elif text == "üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–ª–∞–≤–æ–π":
        link = get_telegraph_link(book, chapter, BIBLE[book][chapter])
        await update.message.reply_text(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {link}")
        return CHAPTER_MENU
    elif text == "üñº –û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫—É":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ!")
        return CHAPTER_MENU
    elif text == "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
        return ADD_NOTE
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return CHAPTER_MENU

async def add_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    note_text = update.message.text.strip()
    if note_text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return CHAPTER_MENU
    book = context.user_data.get('book')
    chapter = context.user_data.get('chapter')
    user_id = update.effective_user.id
    add_user_note(user_id, book, chapter, note_text)
    await update.message.reply_text(f"–ó–∞–º–µ—Ç–∫–∞ –¥–ª—è {book} {chapter} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    return CHAPTER_MENU

async def send_daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –î–ª—è —Ç–µ—Å—Ç–∞: —Ä—É—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–∏—Ö–∞ –¥–Ω—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    # –°—Ç–∏—Ö –¥–Ω—è –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ
    import random
    book = random.choice(list(BIBLE.keys()))
    chapter = random.choice(list(BIBLE[book].keys()))
    verses = BIBLE[book][chapter]
    verse_num = random.randint(0, len(verses)-1)
    verse = verses[verse_num]
    text = f"–°—Ç–∏—Ö –¥–Ω—è:\n{book} {chapter}:{verse_num+1} ‚Äî {verse}"
    for user_id in SUBSCRIBERS:
        try:
            await context.bot.send_message(chat_id=user_id, text=text)
        except Exception:
            pass
    await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

def save_channel_id(channel_id):
    with open(CHANNEL_FILE, 'w', encoding='utf-8') as f:
        json.dump({'channel_id': channel_id}, f, ensure_ascii=False, indent=2)

async def set_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã, –≥–¥–µ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω
    chat = update.effective_chat
    if chat.type in [ChatType.GROUP, ChatType.SUPERGROUP, ChatType.CHANNEL]:
        save_channel_id(chat.id)
        global CHANNEL_ID
        CHANNEL_ID = chat.id
        await update.message.reply_text(f"–ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {chat.title or chat.id}")
    else:
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã, –≥–¥–µ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω!")

async def send_daily_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏—Ö –¥–Ω—è –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É
    if not CHANNEL_ID:
        await update.message.reply_text("–ö–∞–Ω–∞–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_channel –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ.")
        return
    import random
    book = random.choice(list(BIBLE.keys()))
    chapter = random.choice(list(BIBLE[book].keys()))
    verses = BIBLE[book][chapter]
    verse_num = random.randint(0, len(verses)-1)
    verse = verses[verse_num]
    text = f"–°—Ç–∏—Ö –¥–Ω—è:\n{book} {chapter}:{verse_num+1} ‚Äî {verse}"
    try:
        await context.bot.send_message(chat_id=CHANNEL_ID, text=text)
        await update.message.reply_text("–°—Ç–∏—Ö –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

def save_group_reading():
    with open(GROUP_READING_FILE, 'w', encoding='utf-8') as f:
        json.dump(GROUP_READING, f, ensure_ascii=False, indent=2)

async def group_reading_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return
    GROUP_READING[str(chat.id)] = {
        'book': '–ë—ã—Ç–∏–µ',
        'chapter': '1',
        'read_users': [],
        'votes': {}
    }
    save_group_reading()
    await update.message.reply_text("–°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ! –ü–µ—Ä–≤–∞—è –≥–ª–∞–≤–∞: –ë—ã—Ç–∏–µ 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /group_reading_status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞.")

async def group_reading_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if str(chat.id) not in GROUP_READING:
        await update.message.reply_text("–°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∞—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /group_reading_start.")
        return
    data = GROUP_READING[str(chat.id)]
    book = data['book']
    chapter = data['chapter']
    read_users = data.get('read_users', [])
    votes = data.get('votes', {})
    text = f"–¢–µ–∫—É—â–∞—è –≥–ª–∞–≤–∞: {book} {chapter}\n–ü—Ä–æ—á–∏—Ç–∞–ª–∏: {len(read_users)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n–ì–æ–ª–æ—Å–∞ –∑–∞ —Å–ª–µ–¥—É—é—â—É—é –≥–ª–∞–≤—É: {votes}"
    await update.message.reply_text(text)

async def group_vote_next(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    if str(chat.id) not in GROUP_READING:
        await update.message.reply_text("–°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∞—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /group_reading_start.")
        return
    args = context.args
    if not args or len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /group_vote_next <–ö–Ω–∏–≥–∞> <–ì–ª–∞–≤–∞>")
        return
    book = args[0]
    chapter = args[1]
    key = f"{book} {chapter}"
    votes = GROUP_READING[str(chat.id)].setdefault('votes', {})
    votes[key] = votes.get(key, 0) + 1
    save_group_reading()
    await update.message.reply_text(f"–ì–æ–ª–æ—Å –∑–∞ {book} {chapter} —É—á—Ç—ë–Ω!")

def main():
    import os
    TOKEN = os.getenv('BOT_TOKEN', '7771236927:AAGvTkMWju2ATHPN21n_r6pTOBzPfGuHdOw')
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start), MessageHandler(filters.TEXT & ~filters.COMMAND, choose_book)],
        states={
            CHOOSE_BOOK: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_book)],
            BOOK_SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, book_search)],
            CHOOSE_CHAPTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_chapter)],
            CHAPTER_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, chapter_menu)],
            ADD_NOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_note)],
        },
        fallbacks=[CommandHandler('start', start)],
    )
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler('send_daily', send_daily))
    app.add_handler(CommandHandler('set_channel', set_channel))
    app.add_handler(CommandHandler('send_daily_to_channel', send_daily_to_channel))
    app.add_handler(CommandHandler('group_reading_start', group_reading_start))
    app.add_handler(CommandHandler('group_reading_status', group_reading_status))
    app.add_handler(CommandHandler('group_vote_next', group_vote_next))
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    app.run_polling()

if __name__ == '__main__':
    main() 